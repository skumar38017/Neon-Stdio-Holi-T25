----------------------------------------celery.txt------------------------------------------------------------------------------------------------------------------------
    celery -A app.workers.celery_app.celery worker --loglevel=info
    celery -A app.workers.celery_app worker --loglevel=info --concurrency=4
    celery -A app.workers.celery_app flower --port=5555


----------------------------------------migrations.txt------------------------------------------------------------------------------------------------------------------------

Initialize Alembic: To initialize Alembic and set up the migration folder, run:
alembic init alembic

Create a new migration: To create a new migration file, run:
alembic revision --autogenerate -m "Description of changes"

Apply migrations: To apply all migrations, run:
alembic upgrade head

Rollback migrations: To rollback the last migration, run:
alembic downgrade -1

Drop migrations: To drop all migrations, run:
alembic downgrade base

----------------------------------------RabbitMQ User----------------------------------------
# --> in container terminal

docker exec -it rabbitmq rabbitmqctl add_user holi-t25 holi-t25  
docker exec -it rabbitmq rabbitmqctl set_permissions -p / holi-t25 ".*" ".*" ".*"
docker exec -it rabbitmq rabbitmqctl set_user_tags holi-t25 administrator


----------------------------------------Run Containers----------------------------------------
# docker-compose 

docker-compose up -d
docker-compose down
docker-compose up -d --build
docker-compose up -d --build --no-cache
docker-compose --env-file .docker.env up -d --build

docker-compose --env-file .docker.env down
docker-compose --env-file .docker.env up -d  

----------------------------------------Logs----------------------------------------
docker logs rabbitmq

----------------------------------------Delete Containers----------------------------------------
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
docker rmi -f $(docker images -aq)
docker system prune -a


---------------------------------------RabbitMQ on local Machine-----------------------------------------
--> rabbitmq.txt

# Start RabbitMQ
sudo systemctl start rabbitmq-server

# Stop RabbitMQ
sudo systemctl stop rabbitmq-server

# Restart RabbitMQ
sudo systemctl restart rabbitmq-server

# Check RabbitMQ status
sudo systemctl status rabbitmq-server

# Enable RabbitMQ management plugin
sudo rabbitmq-plugins enable rabbitmq_management

# Start RabbitMQ management plugin
sudo systemctl start rabbitmq-server

# Stop RabbitMQ management plugin
sudo systemctl stop rabbitmq-server

# Restart RabbitMQ management plugin
sudo systemctl restart rabbitmq-server

# Check RabbitMQ management plugin status    
sudo systemctl status rabbitmq-server   


-------------------------------------------------postgres-------------------------------
sudo chmod -R 755 /home/tagglab/Videos/Neon-Stdio-Holi-T25/postgres_data
sudo usermod -aG docker $USER

ls -ld /home/tagglab/Videos/Neon-Stdio-Holi-T25/postgres_data
chmod -R u+rw /home/tagglab/Videos/Neon-Stdio-Holi-T25/postgres_data
chmod 777 /home/tagglab/Videos/Neon-Stdio-Holi-T25/postgres_data

psql -h localhost -U postgres -d postgres

-------------------------------------------------redis-------------------------------
redis-cli -h redis -p 6379 ping
redis-cli 
KEYS *
SCAN 0

-------------------------------------------------fastapi-------------------------------

uvicorn main:app --host 0.0.0.0 --port 8000
uvicorn app.main:app --reload


-------------------------------------------------export path-------------------------------
export PYTHONPATH=$PYTHONPATH:/home/tagglab/Videos/Neon-Stdio-Holi-T25/app

-----------------
newgrp docker