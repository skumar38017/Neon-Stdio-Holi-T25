version: '3.8'

services:
  rabbitmq:
    image: ${RABBITMQ_IMAGE}
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: on-failure:3
    ports:
      - "5672:5672"
      - "15672:15672"   
    environment:
      - ${RABBITMQ_DEFAULT_USER}
      - ${RABBITMQ_DEFAULT_PASS}
      - ${RABBITMQ_DEFAULT_VHOST}
    volumes:
      - ${pwd}/rabbitmq_data:/var/lib/rabbitmq
      - ${pwd}/rabbitmq_data/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - ${NETWORK}

  # Redis service
  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: ${REDIS_IMAGE}
    restart: on-failure:3
    ports:
      - "${REDIS_PORT}:${REDIS_HTTP_PORT}"
    networks:
      - ${NETWORK}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  celery-beat:
    build:
      context: .
    container_name: celery-beat-container
    command: celery -A app.workers.celery_app beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
    volumes:
      - ${pwd}/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ${NETWORK}

  celery:
    build:
      context: .
    container_name: celery-container
    command: celery -A app.workers.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - postgres
    volumes:
      - ${pwd}/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ${NETWORK}

  # PostgreSQL service 
  postgres:
    image: ${POSTGRESS_IMAGE}
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: on-failure:3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_HTTP_PORT}"
    networks:
      - ${NETWORK}
    volumes:
      - ${PWD}/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # NocoDB service (no-code platform)
  nocodb:
    container_name: ${NOCO_CONTAINER_NAME}
    image: ${NOCO_IMAGE}
    restart: on-failure:3
    environment:
      - DB_TYPE=${DB_TYPE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}      
      - DB_NAME=${DB_NAME}
    ports:
      - "${NOCO_DB_PORT}:${NOCO_HTTP_PORT}"  # Expose the port for NocoDB, Bind host port 8083 to container port 8080
    volumes:
      - ${PWD}/nocodb_data:/usr/app/data
    networks:
      - ${NETWORK}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NOCO_HTTP_PORT}/api/healthz"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # Watchtower service to automatically update containers
  watchtower:
    container_name: ${WATCHTOWER_CONTAINER_NAME}
    image: ${WATCHTOWER_IMAGE}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 --cleanup
    ports:
      - "${WATCHTOWER_PORT}:${WATCHTOWER_HTTP_PORT}"
    networks:
      - ${NETWORK}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WATCHTOWER_PORT}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

volumes:
  postgres_data: {}
  rabbitmq_data: {}
  redis_data: {}
  nocodb_data: {}

networks:
  backend-network:
    driver: bridge
